#!/bin/sh

usage() {
cat << EOF
Usage: mxbase.config [OPTIONS] PREFIX

Options:
    -a ARCH	specify architecture (default: 64)
    -z PREFIX	specify Z libs path (default: /usr/local32
		  for 32 bit and /usr/local for 64 bit)
    -j PREFIX	specify JNI path (default: /usr/lib/jvm/java-8-openjdk)
    -L		use clang / llvm
    -c		force re-configure
    -d		debug build (default: release)
    -D		address sanitizer build ('')
    -M		build for MinGW-w64
EOF
}

ARCH=64
ZPREFIX=
JPREFIX="/usr/lib/jvm/java-8-openjdk"
CLANG=0
DEBUG=0
CONFIG=0
MINGW=0

while getopts "ha:z:j:LcdDM" arg
do case $arg in
  a) ARCH=$OPTARG;;
  z) ZPREFIX=$OPTARG;;
  j) JPREFIX=$OPTARG;;
  L) CLANG=1;;
  c) CONFIG=1;;
  d) DEBUG=1;;
  D) DEBUG=2; CLANG=1;;
  M) MINGW=1;;
  h) usage; exit 0;;
esac; done
shift $(($OPTIND - 1))

PREFIX=$1
[ -z "$PREFIX" ] && { usage; exit 1; }

OPTFLAGS="-fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans"

if [ $DEBUG -eq 1 ]; then
  OPTFLAGS="-g -m$ARCH $OPTFLAGS"
  FLAGS="-DZDEBUG"
elif [ $DEBUG -eq 2 ]; then
  OPTFLAGS="-m$ARCH -O1 -mtune=haswell -g -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls $OPTFLAGS"
  FLAGS="-DZDEBUG"
else
  OPTFLAGS="-m$ARCH -O3 -mtune=haswell -g $OPTFLAGS"
  FLAGS="-DNDEBUG"
fi

[ $MINGW -eq 1 ] && {
  [ -z "$ZPREFIX" ] && ZPREFIX="$PREFIX"
  OPTFLAGS="$OPTFLAGS -mstackrealign"
  case "$ARCH" in
    32) BUILD="--build=i686-w64-mingw32";;
    64) BUILD="--build=x86_64-w64-mingw32";;
    *) usage;;
  esac
  { echo $PATH | grep -s -q ${PREFIX}/bin; } ||
    PATH="${PREFIX}/bin:${PATH}" export PATH
  [ "$ZPREFIX" != "$PREFIX" ] && {
    { echo $PATH | grep -s -q ${ZPREFIX}/bin; } ||
      PATH="${ZPREFIX}/bin:${PATH}" export PATH
  }
}

case "$ARCH" in
  32) [ -z "$ZPREFIX" ] && ZPREFIX="/usr/local32";;
  64) [ -z "$ZPREFIX" ] && ZPREFIX="/usr/local";;
  *) usage;;
esac

[ $CONFIG -eq 1 ] && {
  touch configure.ac
  autoreconf -f -i
}

[ "$ZPREFIX" != "$PREFIX" ] && ZPREFIX="${PREFIX}:${ZPREFIX}"

FLAGS="$OPTFLAGS $FLAGS"

if [ $CLANG -eq 1 ]; then
  # clang
  WFLAGS="-Wno-empty-body -Wno-unknown-warning-option -Wno-ignored-optimization-argument -Wno-unused-private-field -Wno-varargs"
  FLAGS="$WFLAGS $FLAGS"
  CFLAGS="$FLAGS"
  CXXFLAGS="-std=gnu++2a -stdlib=libstdc++ $FLAGS"
  if [ $DEBUG -eq 2 ]; then
    LDFLAGS="-fsanitize=address -lstdc++ -lm"
  else
    LDFLAGS="-lstdc++ -lm"
  fi
  ./configure $BUILD "--disable-static" "--prefix=$PREFIX" "--with-Z=$ZPREFIX" "--with-jni=$JPREFIX" "CC=clang" "CXX=clang++" "CFLAGS=$CFLAGS" "CXXFLAGS=$CXXFLAGS" "LDFLAGS=$LDFLAGS"
else
  # gcc
  CXXFLAGS="-std=gnu++2a $FLAGS"
  ./configure $BUILD "--disable-static" "--prefix=$PREFIX" "--with-Z=$ZPREFIX" "--with-jni=$JPREFIX" "CFLAGS=$FLAGS" "CXXFLAGS=$CXXFLAGS"
fi
