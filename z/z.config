#!/bin/sh

usage() {
cat << EOF
Usage: z.config [OPTIONS] PREFIX

Options:
    -a ARCH	specify architecture (default: 64)
    -t PATH	specify third party libs path (default: /usr/local32
		  for 32 bit and /usr/local for 64 bit)
    -j PREFIX	specify JNI path (default: /usr/lib/jvm/java-8-openjdk)
    -L		use clang / llvm
    -c		force re-configure
    -d		debug build (default: release) 
    -M		build for MinGW-w64
    -l		pass --enable-libtool-lock to configure
EOF
}

ARCH=64
OPREFIX=
JPREFIX="/usr/lib/jvm/java-8-openjdk"
CLANG=0
CONFIG=0
DEBUG=0
MINGW=0
CM_MIPS64=0
CM_X86_64=0
CM_VERBOSE=0
LIBTOOL_LOCK=""

while getopts "a:z:t:j:LcdMlh" arg
do case $arg in
  a) ARCH=$OPTARG;;
  z|t) OPREFIX=$OPTARG;;
  j) JPREFIX=$OPTARG;;
  L) CLANG=1;;
  c) CONFIG=1;;
  d) DEBUG=1;;
  M) MINGW=1;;
  l) LIBTOOL_LOCK="--enable-libtool-lock";;
  h) usage; exit 0;;
esac; done
shift $(($OPTIND - 1))

PREFIX=$1
[ -z "$PREFIX" ] && { usage; exit 1; }

OPTFLAGS="-fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans"

if [ $DEBUG -eq 1 ]; then
  CM_BUILD="Debug"
  OPTFLAGS="-g -m$ARCH $OPTFLAGS"
  FLAGS="-DZDEBUG"
else
  CM_BUILD="Release"
  OPTFLAGS="-g -m$ARCH -O6 -mtune=haswell $OPTFLAGS"
  FLAGS="-DNDEBUG"
fi

[ $MINGW -eq 1 ] && {
  [ -z "$OPREFIX" ] && OPREFIX="$PREFIX"
  OPTFLAGS="$OPTFLAGS -mstackrealign"
  case "$ARCH" in
    32) BUILD="--build=i686-w64-mingw32";;
    64) BUILD="--build=x86_64-w64-mingw32";;
    *) usage;;
  esac
}

case "$ARCH" in
  32) [ -z "$OPREFIX" ] && OPREFIX="/usr/local32";;
  64) [ -z "$OPREFIX" ] && OPREFIX="/usr/local";;
  *) usage;;
esac

[ $CONFIG -eq 1 ] && {
  touch configure.ac
  autoreconf -f -i
}


FLAGS="$OPTFLAGS $FLAGS"

if [ $CLANG -eq 1 ]; then
  # clang
  WFLAGS="-Wno-empty-body -Wno-unknown-warning-option -Wno-ignored-optimization-argument -Wno-unused-private-field -Wno-varargs"
  FLAGS="$WFLAGS $FLAGS"
  CFLAGS="$FLAGS"
  CXXFLAGS="-std=gnu++2a -stdlib=libstdc++ $FLAGS"
  LDFLAGS="-lstdc++ -lm"
  ./configure $BUILD "--disable-static" "--prefix=$PREFIX" "--with-pcre=$OPREFIX" "--with-readline=$OPREFIX" "--with-hwloc=$OPREFIX" "--with-ck=$OPREFIX" "--with-jni=$JPREFIX" "CC=clang" "CXX=clang++" "CFLAGS=$CFLAGS" "CXXFLAGS=$CXXFLAGS" "LDFLAGS=$LDFLAGS" "$LIBTOOL_LOCK"
else
  # gcc
  CXXFLAGS="-std=gnu++2a $FLAGS"
  ./configure $BUILD "--disable-static" "--prefix=$PREFIX" "--with-pcre=$OPREFIX" "--with-readline=$OPREFIX" "--with-hwloc=$OPREFIX" "--with-ck=$OPREFIX" "--with-jni=$JPREFIX" "CFLAGS=$FLAGS" "CXXFLAGS=$CXXFLAGS" "$LIBTOOL_LOCK"
fi
